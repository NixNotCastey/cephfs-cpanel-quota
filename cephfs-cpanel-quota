#!/usr/bin/env python3
import os
import re
import shutil
import psutil
from json import dumps as j_dump
from math import floor
from pathlib import Path
from configparser import SafeConfigParser

repquota_cache = []
config_file = '/etc/ceph-quota.ini'

if not os.path.isfile(config_file):
    print('Cannot find ' + config_file + ' file')
    exit(1)

config = SafeConfigParser(allow_no_value=True)
config.read(config_file)
repquota_file = config['main']['repquota_cache']


def get_quota_dirs():
    _dirs = []

    for section in config.sections():
        if '/' in section:
            if os.path.ismount(section):
                if get_fstype(section) == 'ceph':
                    _dirs.append(section)
                else:
                    print('Skipped: ' + section + ' is not a CephFS!')
            else:
                print('Skipped: ' + section + ' is not a mount point!')

    if _dirs:
        return _dirs
    else:
        print('No valid CephFS share was found!')
        print('Check config file and mount points in system!')
        exit(1)


def get_cur_quota(path, limit):
    try:
        _quota = int(os.getxattr(path, limit))
    except IOError:
        _quota = 0

    return _quota


def get_fstype(path):
    for part in psutil.disk_partitions(all=True):
        if part.mountpoint == path:
            return part.fstype


def lift_quota(path):
    if os.path.isdir(path):
        os.setxattr(str(path), 'ceph.quota.max_bytes', bytes('0', 'ascii'))
        os.setxattr(str(path), 'ceph.quota.max_files', bytes('0', 'ascii'))


def set_quota(path, key, value):
    if os.path.isdir(path):
        os.setxattr(str(path), key, bytes(str(value), 'ascii'))


def get_cpanel_value(value):
    return value.split('=')[1].strip('\n')


def file_owner_group(file_path):
    return Path(file_path).group()


def get_inodes(plan, quota):
    _inodes = config['main']['default_inodes']
    _quota_mb = int(quota) / 1024

    if plan in config['plans']:
        _inodes = config['plans'][plan]
    else:
        for (quota_range, value) in config.items('inodes'):
            _r_start = int(quota_range.split('-')[0])
            _r_end = int(quota_range.split('-')[1])

            if _quota_mb in range(_r_start, _r_end):
                _inodes = value

    return _inodes


def save_repquota_cache():
    with open(repquota_file, "w") as cachefile:
        cachefile.write("\n".join(repquota_cache))


def save_quota_data(path, user):
    _cur_b = get_cur_quota(path, 'ceph.dir.rbytes')
    _cur_f = get_cur_quota(path, 'ceph.dir.rentries')
    _m_b = int(user['quota_bytes'])
    _m_f = int(user['inodes'])
    _d_b = _m_b - _cur_b
    _d_f = _m_f - _cur_f
    _v = "VERSION"
    _json = {"data": [_cur_b, _m_b, _d_b, _cur_f, _m_f, _d_f], _v: "2.4"}

    _m_kb = str(int(_m_b/1024))
    _cur_kb = str(int(_cur_b/1024))
    _rquota = (user['username'] +
               "\t" + "--\t" + _cur_kb + ("\t" + _m_kb)*2 +
               "\t" + str(_cur_f) + ("\t" + str(_m_f))*2)
    repquota_cache.append(_rquota)

    if _cur_b >= _m_b or _cur_f >= _m_f:
        _lift = True
    else:
        _lift = False

    _filename = '_Cpanel::Quota.pm__' + user['username']
    _data_path = path + '/.cpanel/datastore/'
    _quota_file = _data_path + _filename

    if _lift:
        lift_quota(path)

    if not os.path.isdir(_data_path):
        os.makedirs(_data_path, mode=0o700, exist_ok=True)
        shutil.chown(_data_path, user['username'], user['username'])

    if not os.path.isfile(_quota_file):
        Path(_quota_file).touch(mode=0o600, exist_ok=True)
        shutil.chown(_quota_file, user['username'], user['username'])

    with open(_quota_file, 'w') as file_content:
        file_content.write(j_dump(_json))

    if _lift:
        set_quota(path, 'ceph.quota.max_bytes', _m_b)
        set_quota(path, 'ceph.quota.max_files', _m_f)


def collect_users_data():
    users_list = []
    try:
        for user_file in os.listdir(config['main']['cpanel_user_dir']):
            _user = {}
            _user['username'] = user_file
            full_path = config['main']['cpanel_user_dir'] + '/' + user_file

            try:
                _group_owner = file_owner_group(full_path)

            except KeyError:
                continue

            if full_path.endswith('.lock'):
                continue

            if _group_owner == _user['username'] and _group_owner != 'root':
                if _user['username'] in config['exclude']:
                    _user['plan'] = 'SKIP'
                    _user['quota'] = 0
                    _user['quota_bytes'] = 0
                    _user['inodes'] = 0

                else:
                    with open(full_path, 'r') as file_content:
                        for line in file_content:

                            if re.findall(r'^PLAN=', line):
                                _user['plan'] = get_cpanel_value(line)

                            if re.findall(r'^DISK_BLOCK_LIMIT=', line):
                                _user['quota'] = get_cpanel_value(line)
                                quota_in_bytes = int(_user['quota']) * 1024
                                _user['quota_bytes'] = quota_in_bytes

                try:
                    _user['inodes'] = get_inodes(_user['plan'], _user['quota'])
                    users_list.append(_user)

                except KeyError:
                    continue

    except PermissionError:
        print('Cannot access a users data directory!')
        exit(1)

    return users_list


def set_ceph_quota():
    _ceph_max_b = 'ceph.quota.max_bytes'
    _ceph_max_f = 'ceph.quota.max_files'
    _quota_paths = get_quota_dirs()

    for user in collect_users_data():
        for path in _quota_paths:
            _u_path = path + '/' + user['username']
            if config[path]['type'] == 'dynamic':
                _m_quota = get_cur_quota(_u_path, _ceph_max_b)
                _m_inodes = get_cur_quota(_u_path, _ceph_max_f)

                if int(user['quota_bytes']) != int(_m_quota):
                    set_quota(_u_path, _ceph_max_b, user['quota_bytes'])

                if int(user['inodes']) != int(_m_inodes):
                    set_quota(_u_path, _ceph_max_f, user['inodes'])

                try:
                    save_quota_data(_u_path, user)

                except LookupError:
                    continue

                except OSError:
                    continue

            else:
                _m_quota = get_cur_quota(_u_path, _ceph_max_b)
                _m_inodes = get_cur_quota(_u_path, _ceph_max_f)
                _p_quota = config[path]['quota']
                _p_inodes = config[path]['inodes']

                if int(_p_quota) != int(_m_quota):
                    set_quota(_u_path, _ceph_max_b, _p_quota)

                if int(_p_inodes) != int(_m_inodes):
                    set_quota(_u_path, _ceph_max_f, _p_inodes)

set_ceph_quota()
save_repquota_cache()
